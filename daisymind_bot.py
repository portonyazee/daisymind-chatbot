# -*- coding: utf-8 -*-
"""daisymind_bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16rcRiOTM5jyVNx2GzC73R4sSNUR3Oc0e
"""

!pip install python-telegram-bot==13.15 xgboost joblib scikit-learn

!pip install xgboost joblib scikit-learn

pip install urllib3

!pip uninstall -y python-telegram-bot telegram
!pip install python-telegram-bot==20.7 --upgrade

import telegram
print(telegram.__version__)

import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report, accuracy_score
from xgboost import XGBClassifier

# === Load dataset ===
df = pd.read_csv("dreaddit-train.csv")

# Kolom penting
#   - text  : teks curhatan
#   - label : 0 = non-stress, 1 = stress
df = df.dropna(subset=["text", "label"]).copy()
df["text"] = df["text"].astype(str)
df["label"] = df["label"].astype(int)

# (Opsional) subsample biar training cepat (tetap stratified)
max_per_class = 600
df_trainable = (
    df.groupby("label", group_keys=False)
      .apply(lambda g: g.sample(n=min(len(g), max_per_class), random_state=42))
      .reset_index(drop=True)
)

# === Vectorize TF-IDF ===
tfidf = TfidfVectorizer(
    max_features=2000,      # aman & cepat; boleh dinaikkan kalau GPU/CPU kuat
    ngram_range=(1,2),      # unigram+bigram sering bantu performa teks
    stop_words="english"
)
X = tfidf.fit_transform(df_trainable["text"])
y = df_trainable["label"]

# === Split ===
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# === Train XGBoost ===
model = XGBClassifier(
    n_estimators=200,
    max_depth=5,
    learning_rate=0.1,
    subsample=0.9,
    colsample_bytree=0.9,
    objective="binary:logistic",
    eval_metric="logloss",
    n_jobs=2,
    random_state=42
)
model.fit(X_train, y_train)

# === Evaluasi ringkas ===
y_proba = model.predict_proba(X_test)[:, 1]
y_pred = (y_proba >= 0.5).astype(int)

print("Akurasi:", round(accuracy_score(y_test, y_pred), 4))
print(classification_report(y_test, y_pred, digits=4))

# === Simpan artefak untuk bot ===
joblib.dump(model, "stress_xgb.pkl")
joblib.dump(tfidf, "tfidf_vectorizer.pkl")
print("✅ Saved: stress_xgb.pkl & tfidf_vectorizer.pkl")

import pandas as pd
import joblib

# Load model dan vectorizer
model = joblib.load("stress_xgb.pkl")
tfidf = joblib.load("tfidf_vectorizer.pkl")

# Load dataset (contoh: dreaddit-train.csv)
df = pd.read_csv("dreaddit-train.csv")

# Asumsi kolom teks bernama 'text' dan label 'label' (0=tidak stress, 1=stress)
sample_stress_texts = df["text"].astype(str).tolist()

# Vectorize
X_infer = tfidf.transform(sample_stress_texts)

# Prediksi
proba = model.predict_proba(X_infer)[:,1]
preds = (proba >= 0.5).astype(int)

# Gabungkan hasil ke dataframe
df["predicted_label"] = preds
df["probability"] = proba

# Print contoh 10 data
for t, p, pr in zip(sample_stress_texts[:10], preds[:10], proba[:10]):
    label = "STRESS" if p==1 else "Tidak Stress"
    print(f"{label} (p={pr:.2f})  ::  {t}")

# Simpan hasil lengkap ribuan kalimat
df.to_csv("predicted_dataset.csv", index=False)

import os
import joblib
import random
import nest_asyncio, asyncio
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackQueryHandler
)

# ====== TOKEN ======
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    BOT_TOKEN = "8498636410:AAFbfKL35TgyxGflWn_wix4-RU59D4hHa00"  # <-- ganti tokenmu di sini

# ====== Load model ======
model = joblib.load("stress_xgb.pkl")
tfidf = joblib.load("tfidf_vectorizer.pkl")

def predict_text(text: str):
    X = tfidf.transform([text])
    p = float(model.predict_proba(X)[:, 1][0])
    y = int(p >= 0.5)
    return y, p

# ====== SIMPLE STATE ======
user_states = {}      # per-user simple state
user_logs = []        # global logs (you may wish to persist per-user logs in DB)

# ====== Welcome text ======
def _welcome_markdown_text() -> str:
    return (
        "Heyy 👋 I'm **Zee** — kinda like your chill buddy who checks in on your vibes ✨\n\n"
        "Just drop me whatever’s on your mind, and I’ll tell you if it sounds *Stress* or *Not Stress*.\n\n"
        "💡 And don’t worry, I got you anytime, anywhere 🤍"
    )

async def _send_welcome(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    await context.bot.send_message(chat_id=chat_id, text=_welcome_markdown_text(), parse_mode="Markdown")

# ====== SMART REPLY SYSTEM ======
def smart_reply(user_text: str, y: int, p: float):
    text = user_text.lower()

    # Questions
    if "?" in text:
        if "chocolate" in text:
            return "🍫 Honestly, chocolate lowkey helps stress! Dark ones hit different."
        elif "sleep" in text:
            return "😴 Sleep is top tier self-care. Wanna hear quick tips to snooze better?"
        else:
            return random.choice([
                "Ooo good question 🤔 what do *you* think?",
                "Hmm interesting 🌿 tell me your take on it!",
                "That’s a solid one ✨ how do you feel about it tho?"
            ])

    # Food / drink
    if any(word in text for word in ["eat", "food", "drink", "makan", "minum"]):
        return random.choice([
            "Food defs affects mood 🌱 what’s your go-to comfort snack?",
            "Yum 🍲 eating good = feeling good. What’s your fave food rn?",
            "Comfort food always hits ✨ what meal cheers you up the most?"
        ])

    # Emotions
    if any(word in text for word in ["sad", "sedih", "tired", "capek", "marah", "angry"]):
        return random.choice([
            "That sounds heavy 🤍 wanna vent more? I’m here.",
            "Totally okay to feel like that 🌿 you’re not alone, trust.",
            "Big hug incoming 🤗 you deserve all the softness today."
        ])
    if any(word in text for word in ["happy", "senang", "bahagia", "excited"]):
        return random.choice([
            "Yay love that ✨ what’s making you smile rn?",
            "Your energy is contagious 🌸 keep glowing!",
            "So glad you’re vibin’ 🤍 lock that feeling in."
        ])

    # Activity
    if any(word in text for word in ["work", "kerja", "study", "belajar", "school", "kampus"]):
        return random.choice([
            "Work/study grind is real 🌱 remember breaks exist 👀",
            "You’re hustling hard 🤍 proud of you fr.",
            "Balance vibes ✨ don’t forget rest in between."
        ])
    if any(word in text for word in ["sleep", "tidur", "rest", "istirahat"]):
        return random.choice([
            "Rest = ultimate glow up 🌿 your body & brain need it.",
            "Sleep can literally reset your whole vibe ✨ you sleeping well?",
            "Don’t sleep on… sleep 🤍 it’s as valid as hard work."
        ])

    # Relationships
    if any(word in text for word in ["friend", "teman", "sahabat", "family", "keluarga", "mama", "papa"]):
        return random.choice([
            "People you vibe with = priceless 🤍 how’s your circle rn?",
            "Family/friends give so much comfort 🌿",
            "It’s wholesome sharing life with ppl you love 💫"
        ])

    # Default based on stress detection
    if y == 1:  # Stress
        if p > 0.8:
            return random.choice([
                "That’s a lot to carry 🤍 wanna share what hit hardest today?",
                "I feel you 🌿 sounds overwhelming tbh.",
                "You’re holding smth heavy rn… I’m here for you 💫"
            ])
        else:
            return random.choice([
                "Catching some stress vibes 🌱 what’s one tiny thing that might help rn?",
                "You might be a lil tense 🤍 deep breath time?",
                "Even small stress counts 🌿 how do you usually cope?"
            ])
    else:  # Not stress
        if p < 0.2:
            return random.choice([
                "Peaceful energy ✨ what’s keeping you this relaxed?",
                "Your calmness is goals 🌿 keep enjoying it.",
                "Love that peace 🤍 soak it all in."
            ])
        else:
            return random.choice([
                "You’re vibin okay 🌿 found anything cool to unwind with lately?",
                "Sounds pretty balanced ✨ what keeps you steady?",
                "Handling it well 🤍 keep doing you!"
            ])

# ====== Handlers ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_states.clear()
    await _send_welcome(context, update.effective_chat.id)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Just type how you’re feeling 🌿\nI’ll always be around to listen 🤍"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = (update.message.text or "").strip()

    if not user_text:
        await update.message.reply_text("Drop some text first 🌸")
        return

    y, p = predict_text(user_text)
    label = "⚠️ Detection Stress" if y == 1 else "✅ Not Stress"
    tips = smart_reply(user_text, y, p)

    reply = f"{label}\nConfidence: {p:.2f}\n\n{tips}\n\n💡 I gotchu anytime, anywhere 🤍"

    keyboard = [
        [
            InlineKeyboardButton("🌸 Keep Talking", callback_data="continue"),
            InlineKeyboardButton("🤍 End Chat", callback_data="end")
        ]
    ]

    if y == 1:
        keyboard.append([
            InlineKeyboardButton("🧘 Breathe", callback_data="relax_breathing"),
            InlineKeyboardButton("🎶 Chill Playlist", callback_data="relax_playlist"),
            InlineKeyboardButton("📓 Journal Prompt", callback_data="relax_journaling"),
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("🎵 Hype Playlist", callback_data="relax_upbeat"),
            InlineKeyboardButton("🎮 Tiny Game", callback_data="relax_game"),
            InlineKeyboardButton("🙏 Gratitude Check", callback_data="relax_gratitude"),
        ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(reply, reply_markup=reply_markup)

    user_states[user_id] = {"last_label": label, "last_prob": p, "last_text": user_text}
    user_logs.append({
        "user_id": user_id,
        "text": user_text,
        "predicted_label": label,
        "probability": p
    })
    pd.DataFrame(user_logs).to_csv("mood_logs.csv", index=False)

# ====== Callback for buttons ======
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "continue":
        await query.message.reply_text("🌸 Bet, keep going — I’m listening 🤍")
        return

    if query.data == "end":
        farewell_quotes = [
            "🤍 Thx for chatting 🌸 remember, I’m always just one text away 🌿",
            "✨ Deep breath, you did enough today. Go rest 🤍",
            "🌱 Even if it’s tough rn, better days are coming. I’ll be waiting 🤍"
        ]
        await query.message.reply_text(random.choice(farewell_quotes))
        await query.message.reply_text("🤗 Big hug your way!")

        keyboard = [[InlineKeyboardButton("🔄 Restart Chat", callback_data="restart")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("Wanna start fresh?", reply_markup=reply_markup)
        return

    if query.data == "restart":
        uid = query.from_user.id
        if uid in user_states:
            del user_states[uid]
        global user_logs
        user_logs = [log for log in user_logs if log.get("user_id") != uid]
        pd.DataFrame(user_logs).to_csv("mood_logs.csv", index=False)

        await query.message.reply_text("🔄 Fresh start! Let’s vibe again 🌸")
        await _send_welcome(context, query.message.chat_id)
        return

    # Quick Relax Tips
    if query.data == "relax_breathing":
        await query.message.reply_text("🧘 Try this: Inhale 4s, hold 4s, exhale 6s. Repeat 5x 🌿")
        return
    if query.data == "relax_playlist":
        await query.message.reply_text("🎶 Chill playlist for u: https://open.spotify.com/playlist/37i9dQZF1DX3rxVfibe1L0")
        return
    if query.data == "relax_journaling":
        await query.message.reply_text("📓 Journal idea: Write 3 things you’re grateful for + 1 thing you’re letting go ✨")
        return
    if query.data == "relax_upbeat":
        await query.message.reply_text("🎵 Hype playlist to boost ur mood: https://open.spotify.com/playlist/37i9dQZF1DX1g0iEXLFycr")
        return
    if query.data == "relax_game":
        riddle = "🧩 Riddle time: I speak without a mouth and hear without ears. I have nobody, but I come alive with wind. What am I?"
        await query.message.reply_text(riddle)
        return
    if query.data == "relax_gratitude":
        await query.message.reply_text("🙏 Gratitude check: name 3 small wins today — even tiny ones count!")
        return

# ====== Run polling ======
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("🤖 Zee bot (gen z edition) is running...")
    await app.run_polling()

nest_asyncio.apply()
await asyncio.sleep(0)
await main()